package sidewaysdungeon.rooms;

import sidewaysdungeon.game_files.*;
import sidewaysdungeon.text.*;
import java.util.Map;
import java.util.HashMap;

public class House_Library extends Room implements RoomTemplate
{
	//Use the main method to test the room
	public static void main(String[] args)
	{
		String result;
		House_Library testRoom = new House_Library();
		do {
			result = testRoom.playRoom("");
		} while(result.equals("house_library"));
		System.out.println(result);
	}
	
	//Room items
	final private String BOOKSHELF = "bookshelf";	//use
	final private String BOOK_A = "book a";			//use
	final private String BOOK_B = "book b";			//use
	final private String BOOK_C = "book c";			//use
	final private String BOOK_D = "book d";			//use
	final private String BOOK_E = "book e";			//use
	
	//Room variables
	private Map<String, Boolean> bookStates = new HashMap<String, Boolean>();
	
	private int numBooksPressed = 0;
	
	private boolean bookPlaced = false;
	private boolean doorOpened = false;
	
	//Maps
	private final String MAP_INITIAL = "----------| |----------\n"
									 + "|                     |\n"
									 + "|   |  |   |   |  |   |\n"
									 + "|   |  |   |  ?|  |   |\n"
									 + "|   |  |   |   |  |   |\n"
									 + "|          o          |\n"
									 + "----------###----------\n";
	
	private final String MAP_HAS_BOOK = "----------| |----------\n"
									  + "|                     |\n"
									  + "|   |  |   |   |  |   |\n"
									  + "|   |  |   |  u|  |   |\n"
									  + "|   |  |   |   |  |   |\n"
									  + "|          o          |\n"
									  + "----------###----------\n";
	
	private final String MAP_BOOK_PLACED_A = "----------| |----------\n"
										   + "|                     |\n";
	
	private final String MAP_BOOK_PLACED_B = "|          o          |\n"
										   + "----------###----------\n";
	
	private final String MAP_DOOR_OPENED = "----------| |----------\n"
										 + "|                     |\n"
										 + "|   | ?|   |   |  |   |\n"
									     + "|  ?|  |   |  ?|  |   |\n"
									     + "|   |  |  ?|   |  |?  |\n"
									     + "|          o          |\n"
									     + "----------| |----------\n";
	
	//Constructor
	public House_Library()
	{
		roomName = "Library";
		fearMultiplier = -1.2f;
		
		//Add useable items
		usable.add(BOOKSHELF);
		
		//Add directions
		directions.add("north");
	}
	
	//map STRING METHOD: Returns the current map to print
	public String map()
	{
		if(doorOpened)
			return MAP_DOOR_OPENED;
		else if(bookPlaced)
			return compilePuzzleMap();	//While the book puzzle is active, map will be generated by compilePuzzleMap()
		else if(inventory.contains(Strings.BOOK_NAME))
			return MAP_HAS_BOOK;
		else
			return MAP_INITIAL;
	}
	
	//printMap VOID METHOD: Prints the map, map legend, the current exits, and the last shown text
	public void printMap(boolean showLastText)
	{
		System.out.println();
		System.out.println(map());
		System.out.println(Strings.MAP_LEGEND);
		System.out.println(exits());
		   
		if(showLastText)
			System.out.println(lastShownText);
	}
	
	//playRoom STRING METHOD: Code that actually plays the room
	public String playRoom(String prevRoom)
	{
	 	updateStats();
	 	
	 	//Add all 5 books to bookStates, if the player has already visited this room, they will all reset to false
		bookStates.put(BOOK_A, false);
		bookStates.put(BOOK_B, false);
		bookStates.put(BOOK_C, false);
		bookStates.put(BOOK_D, false);
		bookStates.put(BOOK_E, false);
	 	
	 	//Print room name
	 	System.out.println("-~" + roomName.toUpperCase() + "~-");
	 	
	 	//Print room map
	 	printMap(false);
			
	 	//Print room description
	 	if(numVisits == 1)
	 	{	
	 		lastShownText = "You emerge from the secret passageway into a large library;\n"
	 					  + "the hidden door to the passageway closes behind you. The\n"
	 					  + "library is very fancy; quite a contrast from the prison you\n"
	 					  + "just came from. Books line the shelves everywhere you look,\n"
	 					  + "though they look like they haven't been touched in years.";
	 		
	 		//If the player still has the torch in their inventory, add the following message, and replace it with the unlit torch
	 		//DEBUG: Make sure this is commented out when not in use
 			//inventory.add(torch);
 			
	 		if(inventory.contains(Strings.TORCH_NAME))
	 		{
	 			inventory.replace(Strings.TORCH_NAME, unlit_torch);
	 			
	 			lastShownText += "\nA gust of wind comes in from a broken window and blows out\n"
	 						   + "your TORCH.\n\n"
	 						   + Strings.UNLIT_TORCH_NAME.toUpperCase() + Strings.HAD_BEEN_ADDED;
	 			
	 		}
	 	}
	 	else
	 	{
	 		lastShownText = "You come into the library. Dusty books line the bookshelves\n"
	 					  + "everywhere you look.";
	 		
	 		//If the player has come from the secret passageway and has taken the cat
	 		if(prevRoom.equals("secret_passageway") && cat.taken())
	 		{
	 			cat.giveCat();
	 			Commands.addPet();
	 		}
	 	}
	 	
	 	System.out.println(lastShownText);
	 	
	 	//Update the cat's fear
	 	cat.updateFear(fearMultiplier);
	 	
	 	//Get commands from player
	 	while(true)
	 	{
	 		String command = Commands.promptCommand(keyboard, false, inventory);
	 		
	 		//Intercept commands
	        if(command.length() >= 2 && command.substring(0,2).equals("#&"))	//Load entered room
	        	return command.substring(2);
	        else if(command.equals("##"))										//Reload this room
	        	return "house_library";
	        else if(command.equals("%#"))										//Show this room's variable list
	        {
	        	System.out.println("numVitits: " + numVisits + "\n"
	        				     + "\n"
	        				     + "bookStates: " + bookStates + "\n"
	        				     + "\n"
	        				     + "numBooksPressed: " + numBooksPressed + "\n"
	        				     + "\n"
	        					 + "bookPlaced: " + bookPlaced + "\n"
	        					 + "doorOpened: " + doorOpened);
	       	 	continue;
	        }
	 		
	 		//Act on command
	 		switch(command)
	 		{
	 			case "inspect":
	 			{
	 				if(doorOpened)
	 					System.out.println("All 5 books are pushed in!");
	 				else if(bookPlaced)
	 					System.out.println(numBooksPressed + " out of 5 books are pushed in.");
	 				else
	 					System.out.println("There's a book missing here.");
	 				
	 				break;
	 			}
	 			case "use":
	 			{
	 				switch(Commands.promptUse(usable))
	 				{
	 					case BOOKSHELF:
	 					{
	 						switch(inventory.promptItem(BOOKSHELF))
	 						{
	 							case "":
	 								break;
	 							case Strings.BOOK_NAME:
	 							{
	 								usable.remove(BOOKSHELF);
	 								inventory.remove(Strings.BOOK_NAME);
	 								bookPlaced = true;
	 								
	 								//Add all 5 books to usable
	 								usable.add(BOOK_A);
	 								usable.add(BOOK_B);
	 								usable.add(BOOK_C);
	 								usable.add(BOOK_D);
	 								usable.add(BOOK_E);
	 								
	 								lastShownText = "You hear a loud ticking sound as you slide the book into\n"
	 											  + "the shelf. Suddenly, four other books slide out of their\n"
	 											  + "places.";
	 								
	 								//Print new map
	 								printMap(true);
	 								
	 								break;
	 							}
	 							default:
	 								System.out.println(Strings.CANT_USE_THAT_HERE);
	 						}
	 						
	 						break;
	 					}
	 					case BOOK_A:
						{
							toggleBooks(BOOK_A, BOOK_E, BOOK_B);
							break;
						}
						case BOOK_B:
						{
							toggleBooks(BOOK_B, BOOK_A, BOOK_C);
							break;
						}
						case BOOK_C:
						{
							toggleBooks(BOOK_C, BOOK_B, BOOK_D);
							break;
						}
						case BOOK_D:
						{
							toggleBooks(BOOK_D, BOOK_C, BOOK_E);
							break;
						}
						case BOOK_E:
						{
							toggleBooks(BOOK_E, BOOK_D, BOOK_A);
							break;
						}
	 				}
	 				
	 				break;
	 			}
	 			case "take":
	 			{
	 				Commands.promptTake(takeable);
	 				break;
	 			}
	 			case "talk":
	 			{
	 				Commands.promptTalk(talkable);
	 				break;
	 			}
	 			case "map":
	 			{
	 				printMap(true);
	 				break;
	 			}
	 			case "north":
	 			{
	 				//Reset book states
	 				if(bookPlaced)
	 				{
	 					bookStates.put(BOOK_A, false);
	 					bookStates.put(BOOK_B, false);
	 					bookStates.put(BOOK_C, false);
	 					bookStates.put(BOOK_D, false);
	 					bookStates.put(BOOK_E, false);
	 				}
	 				
	 				System.out.println("You go NORTH.\n\n");
	 				Operate.delay(500);
	 				return "house_foyer";
	 			}
	 			case "south":
	 			{
	 				if(!doorOpened)
	 					System.out.println("The door to the passageway closed behind you. You'll need to\n"
	 									 + "find a way to open it again to go back SOUTH.");
	 				else
	 				{
	 					System.out.print("You go SOUTH.");
	 					
	 					if(cat.taken())
	 					{
	 						cat.removeCat();
	 						Commands.removePet();
	 						
	 						System.out.println(' ' + cat.getName() + " stays behind.\n\n");
	 					}
	 					else
	 						System.out.println("\n\n");
	 					
	 					Operate.delay(500);
	 					return "secret_passageway";
	 				}
	 				
	 				//TODO Add another message for when the player has retrieved the portrait from prison_cell_a (to be added later)
	 				
	 				break;
	 			}
	 			case "east":
	 			case "west":
	 			case "up":
	 			case "down":
	 				System.out.println(Strings.CANT_MOVE + command.toUpperCase() + '.');
	 		}
	 	}
	}
	
	//Because of the number of possible combinations for the books, the map for this room must be compiled in real time
	private String compilePuzzleMap()
	{
		String result = MAP_BOOK_PLACED_A;
		
		result += String.format("|   | %c|   |   |  |   |\n"
							  + "|  %c|  |   |  %c|  |   |\n"
							  + "|   |  |  %c|   |  |%c  |\n",
							   (bookStates.get(BOOK_B) ? '?' : 'u'),
							   (bookStates.get(BOOK_A) ? '?' : 'u'),
							   (bookStates.get(BOOK_D) ? '?' : 'u'),
							   (bookStates.get(BOOK_C) ? '?' : 'u'),
							   (bookStates.get(BOOK_E) ? '?' : 'u'));
		
		result += MAP_BOOK_PLACED_B;
		
		return result;
	}
	
	//Toggles the book the player selected (s) as well as the book to the left (l) and right (r)
	private void toggleBooks(String s, String l, String r)
	{
		//TODO Replace adjacent book names with "book to the left" and "book to the right"
		//Current selected book state is true (pushed in)
		if(bookStates.get(s) == true)
		{
			//Set to false
			numBooksPressed--;
			bookStates.put(s, false);
			
			lastShownText = "You pull out " + s.toUpperCase() + ".\n";
		}
		//Current selected book is false (pulled out)
		else
		{
			//Set to true
			numBooksPressed++;
			bookStates.put(s, true);
			
			lastShownText = "You push in " + s.toUpperCase() + ".\n";
		}
		
		
		//Left adjacent book state is true (pushed in)
		if(bookStates.get(l) == true)
		{
			//Set to false
			numBooksPressed--;
			bookStates.put(l, false);
		}
		//Left adjacent selected book is false (pulled out)
		else
		{
			//Set to true
			numBooksPressed++;
			bookStates.put(l, true);
		}
		
		
		//Right adjacent book state is true (pushed in)
		if(bookStates.get(r) == true)
		{
			//Set to false
			numBooksPressed--;
			bookStates.put(r, false);
		}
		//Right adjacent selected book is false (pulled out)
		else
		{
			//Set to true
			numBooksPressed++;
			bookStates.put(r, true);
		}
		
		
		//Print statuses for adjacent books
		if(bookStates.get(l) == false && bookStates.get(r) == false)		//both books are now false (pulled out)
			lastShownText += l.toUpperCase() + " and " + r.toUpperCase() + " were pulled out.";
		else if(bookStates.get(l) == true && bookStates.get(r) == true)		//both books are now true (pushed in)
			lastShownText += l.toUpperCase() + " and " + r.toUpperCase() + " were pushed in.";
		else																//both books now have different values
		{
			lastShownText += l.toUpperCase() + ((bookStates.get(l) == true) ? " was pushed in.\n" : " was pulled out.\n");
			lastShownText += r.toUpperCase() + ((bookStates.get(r) == true) ? " was pushed in." : " was pulled out.");
		}
		
		//Print new map
		printMap(true);
		
		
		//Check puzzle completion
		if(!bookStates.containsValue(false))
		{
			doorOpened = true;
			directions.add("south");
			secret_passageway.setDoorUnlockedToFalse();
			
			//Remove books from usable
			usable.remove(BOOK_A);
			usable.remove(BOOK_B);
			usable.remove(BOOK_C);
			usable.remove(BOOK_D);
			usable.remove(BOOK_E);
			
			System.out.println();
			Operate.delay(1500);
			System.out.print("You hear something unlock...");
			Operate.delay(2500);
			System.out.println();
			
			lastShownText = "That did it! The door to the secret passageway is open again!\n\n"
						  + Strings.PATH_OPENED + "SOUTH.";
			
			//Print new map
			printMap(true);
		}
	}
	
	//Return doorOpened
	public boolean doorOpened()
	{
		return doorOpened;
	}
}